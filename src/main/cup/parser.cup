package lyc.compiler;

import java_cup.runtime.*;

class Parser;


//--------- Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET; // {
terminal CLOSE_BRACKET;
terminal OPEN_SQR_BRACKET; // [
terminal CLOSE_SQR_BRACKET;
terminal OPEN_PAR;          // (
terminal CLOSE_PAR;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

//Aca van los nuestros

//palabras reservadas que pide el enunciado
terminal INIT; // declarar un bloque de variables
terminal COLON; //Son los dos puntos " : "
terminal SEMI_COLON; //Son los dos puntos ";"
terminal READ; //entrada
terminal WRITE; //salida

///palabras reservadas de java
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal BOOLEAN;
terminal TRUE;
terminal FALSE;



//--------- Non Terminals

non terminal program;
non terminal block;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;

//Aca van los nuestros

// Start Symbol Definition


start with program;
program ::= block;
block ::= block sentence;
block ::= sentence;
sentence ::= assignment {: System.out.println("End"); :};
sentence ::= WRITE OPEN_PAR STRING_CONSTANT CLOSE_PAR {: System.out.println("Write CONST"); :};
sentence ::= WRITE OPEN_PAR IDENTIFIER CLOSE_PAR {: System.out.println("Write I"); :};


assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
assignment ::= IDENTIFIER ASSIG STRING_CONSTANT {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Integer Constant: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Float Constant: " + constant ); :};
factor ::= OPEN_PAR expression CLOSE_PAR {: System.out.println("Factor = (Expression)"); :};

//ac√° abajo van nuestras definiciones de NO terminales















