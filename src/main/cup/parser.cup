package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.SymbolTableGenerator;

class Parser;



//--------- Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET; // {
terminal CLOSE_BRACKET;
terminal OPEN_SQR_BRACKET; // [
terminal CLOSE_SQR_BRACKET;
terminal OPEN_PAR;          // (
terminal CLOSE_PAR;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;

terminal OP_GT;
terminal OP_GE;
terminal OP_LT;
terminal OP_LE;
terminal OP_EQ;
terminal OP_NE;
terminal OP_NOT;
terminal OP_AND;
terminal OP_OR;

//Aca van los nuestros

//palabras reservadas que pide el enunciado
terminal INIT;          // declarar un bloque de variables
terminal COLON;         // ":"
terminal SEMI_COLON;    // ";"
terminal COMMA;         // ","
terminal READ;          //entrada
terminal WRITE;         //salida

///palabras reservadas de java
terminal IF;
terminal ELSE;
terminal WHILE;
terminal FOR;
terminal INT;
terminal FLOAT;
terminal STRING;
terminal BOOLEAN;
terminal TRUE;
terminal FALSE;



//--------- Non Terminals

non terminal program;
non terminal block;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal if_expresion;
non terminal while_expresion;
non terminal logic_condition;
non terminal logic_expression;
non terminal init_block;
non terminal identifier_list;

//Aca van los nuestros

// Start Symbol Definition


start with program;
program ::= block;
program ::= ; //para el caso en que un programa solo hay comentarios
block ::= block sentence;
block ::= sentence;
block ::= init_block;
sentence ::= assignment {: System.out.println("End"); :};

sentence ::= WRITE OPEN_PAR STRING_CONSTANT CLOSE_PAR {: System.out.println("Write CONST"); :};
sentence ::= WRITE OPEN_PAR IDENTIFIER CLOSE_PAR {: System.out.println("Write ID"); :};
sentence ::= READ OPEN_PAR IDENTIFIER CLOSE_PAR {: System.out.println("Read ID"); :};
sentence ::= if_expresion {: System.out.println("if expression"); :};
sentence ::= while_expresion {: System.out.println("while expression"); :};


init_block ::= INIT OPEN_BRACKET block CLOSE_BRACKET;
sentence ::= identifier_list COLON INT | identifier_list COLON FLOAT | identifier_list COLON STRING;
identifier_list ::= identifier_list COMMA IDENTIFIER:id {: System.out.println("Se cargó el identifier \"" + id +"\" en la tabla de simbolos"  ); SymbolTableGenerator.agregarLexema(id.toString(), "ID"); :};
identifier_list ::= IDENTIFIER:id {: System.out.println("Se cargó el identifier \"" + id +"\" en la tabla de simbolos"  ); SymbolTableGenerator.agregarLexema(id.toString(), "ID"); :};

assignment ::= IDENTIFIER:id ASSIG expression {:
        System.out.println("Assignment");
        SymbolTableGenerator.agregarLexema(id.toString(), "ID");
:};
assignment ::= IDENTIFIER:id ASSIG STRING_CONSTANT:constant {:
        System.out.println("Assignment");
        SymbolTableGenerator.agregarLexema(id.toString(), "ID");
        SymbolTableGenerator.agregarLexema(constant.toString(), "CTE");
 :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {:
        System.out.println("Id: " + id);
        SymbolTableGenerator.agregarLexema(id.toString(), "ID");
 :};
factor ::= INTEGER_CONSTANT:constant {:
        System.out.println("Integer Constant: " + constant );
        SymbolTableGenerator.agregarLexema(constant.toString(), "CTE");
:};
factor ::= FLOAT_CONSTANT:constant {:
        System.out.println("Float Constant: " + constant );
        SymbolTableGenerator.agregarLexema(constant.toString(), "CTE");
:};
factor ::= OPEN_PAR expression CLOSE_PAR {: System.out.println("Factor = (Expression)"); :};

if_expresion ::= IF OPEN_PAR logic_condition CLOSE_PAR OPEN_BRACKET block CLOSE_BRACKET | IF OPEN_PAR logic_condition CLOSE_PAR OPEN_BRACKET block CLOSE_BRACKET ELSE OPEN_BRACKET block CLOSE_BRACKET;
logic_condition ::= logic_expression OP_AND logic_expression | logic_expression OP_OR logic_expression; ///esta ultima parte está dudosa
logic_condition ::= logic_expression | OP_NOT logic_expression;
logic_expression ::= factor OP_GT factor | factor OP_GE factor | factor OP_LT factor | factor OP_LE factor | factor OP_NE factor | factor OP_EQ factor;

while_expresion ::=  WHILE OPEN_PAR logic_condition CLOSE_PAR OPEN_BRACKET block CLOSE_BRACKET;













